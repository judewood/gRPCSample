// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "blog.proto" (package "blog", syntax proto3)
// tslint:disable
import { Empty } from "./google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message blog.Blog
 */
export interface Blog {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string author_id = 2;
     */
    authorId: string;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string content = 4;
     */
    content: string;
}
/**
 * @generated from protobuf message blog.BlogId
 */
export interface BlogId {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message blog.CurrentTime
 */
export interface CurrentTime {
    /**
     * @generated from protobuf field: string currentTime = 1;
     */
    currentTime: string;
}
/**
 * @generated from protobuf message blog.InitiateCurrentTime
 */
export interface InitiateCurrentTime {
    /**
     * @generated from protobuf field: int32 interval = 1;
     */
    interval: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class Blog$Type extends MessageType<Blog> {
    constructor() {
        super("blog.Blog", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "author_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Blog>): Blog {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.authorId = "";
        message.title = "";
        message.content = "";
        if (value !== undefined)
            reflectionMergePartial<Blog>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Blog): Blog {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string author_id */ 2:
                    message.authorId = reader.string();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string content */ 4:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Blog, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string author_id = 2; */
        if (message.authorId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.authorId);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string content = 4; */
        if (message.content !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blog.Blog
 */
export const Blog = new Blog$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlogId$Type extends MessageType<BlogId> {
    constructor() {
        super("blog.BlogId", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BlogId>): BlogId {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<BlogId>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlogId): BlogId {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlogId, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blog.BlogId
 */
export const BlogId = new BlogId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CurrentTime$Type extends MessageType<CurrentTime> {
    constructor() {
        super("blog.CurrentTime", [
            { no: 1, name: "currentTime", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CurrentTime>): CurrentTime {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.currentTime = "";
        if (value !== undefined)
            reflectionMergePartial<CurrentTime>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CurrentTime): CurrentTime {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string currentTime */ 1:
                    message.currentTime = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CurrentTime, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string currentTime = 1; */
        if (message.currentTime !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.currentTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blog.CurrentTime
 */
export const CurrentTime = new CurrentTime$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InitiateCurrentTime$Type extends MessageType<InitiateCurrentTime> {
    constructor() {
        super("blog.InitiateCurrentTime", [
            { no: 1, name: "interval", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<InitiateCurrentTime>): InitiateCurrentTime {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.interval = 0;
        if (value !== undefined)
            reflectionMergePartial<InitiateCurrentTime>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InitiateCurrentTime): InitiateCurrentTime {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 interval */ 1:
                    message.interval = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InitiateCurrentTime, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 interval = 1; */
        if (message.interval !== 0)
            writer.tag(1, WireType.Varint).int32(message.interval);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message blog.InitiateCurrentTime
 */
export const InitiateCurrentTime = new InitiateCurrentTime$Type();
/**
 * @generated ServiceType for protobuf service blog.BlogService
 */
export const BlogService = new ServiceType("blog.BlogService", [
    { name: "CreateBlog", options: {}, I: Blog, O: BlogId },
    { name: "GetBlog", options: {}, I: BlogId, O: Blog },
    { name: "UpdateBlog", options: {}, I: Blog, O: Empty },
    { name: "DeleteBlog", options: {}, I: BlogId, O: Empty },
    { name: "ListBlog", serverStreaming: true, options: {}, I: Empty, O: Blog },
    { name: "SendCurrentTime", serverStreaming: true, options: {}, I: InitiateCurrentTime, O: CurrentTime }
]);
